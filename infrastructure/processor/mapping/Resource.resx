<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Argument_Base32InvalidCharacter" xml:space="preserve">
    <value>Invalid character '{0:x2}' is encountered.</value>
  </data>
  <data name="Argument_EnumValueNotDefined" xml:space="preserve">
    <value>The value {0} is not defined for the enum {1}.</value>
  </data>
  <data name="Argument_IncorrectArrayLength" xml:space="preserve">
    <value>Incorrect array length ({0}) expected {1}.</value>
  </data>
  <data name="Argument_IncorrectArrayLengthRange" xml:space="preserve">
    <value>The array length is expected to be between {0} and {1} but is actually {2}.</value>
  </data>
  <data name="Argument_IncorrectType" xml:space="preserve">
    <value>The type {0} is not the correct type for the parameter.  Expected type {1}.</value>
  </data>
  <data name="Argument_InvalidGuid" xml:space="preserve">
    <value>Invalid identifier - GUID version 9 is required. First nibble of the sixth octet is set to 0x9 and octets 8 and 9 are set to 0x80 and 0x00 respectively.</value>
  </data>
  <data name="Argument_InvalidIdentifierFormat" xml:space="preserve">
    <value>Invalid object identifier format.</value>
  </data>
  <data name="Argument_MaximumArrayLength" xml:space="preserve">
    <value>The array length must be at most {0} but is actually {1}.</value>
  </data>
  <data name="Argument_MinimumArrayLength" xml:space="preserve">
    <value>The array length must be at least {0} but is actually {1}.</value>
  </data>
  <data name="Argument_MustBeGreaterThan" xml:space="preserve">
    <value>Argument must be greater than value.</value>
  </data>
  <data name="Argument_MustBeGreaterThanOrEqual" xml:space="preserve">
    <value>Argument must be greater than or equal to value.</value>
  </data>
  <data name="Argument_MustBeObjectIdentifier" xml:space="preserve">
    <value>Argument must be of type ObjectIdentifier.</value>
  </data>
  <data name="Cancelled_EndOfData" xml:space="preserve">
    <value>The operation has been cancelled because EndOfData has been signaled</value>
  </data>
  <data name="CollectionIsEmpty" xml:space="preserve">
    <value>The collection is empty.</value>
  </data>
  <data name="ErrorGettingRemoteContent" xml:space="preserve">
    <value>Error getting remote content: {0}.
Location: {1}</value>
  </data>
  <data name="Format_EmptyObjectIdentifier" xml:space="preserve">
    <value>Empty object identifier cannot be converted to a canonical string.</value>
  </data>
  <data name="Format_InvalidNodeIdentifierFormatSpecification" xml:space="preserve">
    <value>Format string can be only "C", "c".</value>
  </data>
  <data name="Format_InvalidObjectIdentifierFormatSpecification" xml:space="preserve">
    <value>Format string can be only "G", "g", "C", "c", "O", "o".</value>
  </data>
  <data name="Format_LegacyGuidObjectIdentifier" xml:space="preserve">
    <value>Legacy Guid object identifier cannot converted to a canonical string.</value>
  </data>
  <data name="InvalidNodeIdFoundInStorage" xml:space="preserve">
    <value>Invalid Node Identifier retrieved from storage.</value>
  </data>
  <data name="Invalid_AsyncResult" xml:space="preserve">
    <value>The provided IAsyncResult is invalid.</value>
  </data>
  <data name="Invalid_EndOfDataSignaled" xml:space="preserve">
    <value>Data can not be popped off the stack once the end of data has been reached.</value>
  </data>
  <data name="Invalid_OPC_Provider" xml:space="preserve">
    <value>Invalid OPC provider supplied.</value>
  </data>
  <data name="LattitudeOutOfRangeError" xml:space="preserve">
    <value>Latitude must be between -90 and 90</value>
  </data>
  <data name="LongitudeOutOfRangeError" xml:space="preserve">
    <value>Longitude must be between -180 and 180</value>
  </data>
  <data name="NotSupported_UnreadableStream" xml:space="preserve">
    <value>Stream does not support reading.</value>
  </data>
  <data name="NotSupported_UnseekableStream" xml:space="preserve">
    <value>Stream does not support seeking.</value>
  </data>
  <data name="NotSupported_UnwritableStream" xml:space="preserve">
    <value>Stream does not support writing.</value>
  </data>
  <data name="ResourceDescriptor_NoDefaultConstructor" xml:space="preserve">
    <value>Resource Descriptor class must implement default constructor.</value>
  </data>
  <data name="Timeout_PopOffStack" xml:space="preserve">
    <value>The Stack.Pop operation has timed out after {0} ms.</value>
  </data>
  <data name="TypeA_NotAssignableFrom_TypeB" xml:space="preserve">
    <value>{0} must be assignable from  {1}.</value>
  </data>
</root>